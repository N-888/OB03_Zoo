# –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Python
import tkinter as tk  # GUI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Tkinter
from tkinter import messagebox  # –î–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
import logging  # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
import pickle  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã (–∑–æ–æ–ø–∞—Ä–∫–∞)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: —Ñ–∞–π–ª, —É—Ä–æ–≤–µ–Ω—å, —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏
logging.basicConfig(
    filename="zoo_log.txt",  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ (INFO ‚Äî –æ–±—ã—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s"  # –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
)

# üìå –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Animal (–ñ–∏–≤–æ—Ç–Ω–æ–µ)
class Animal:
    def __init__(self, name, age):
        # –ê—Ç—Ä–∏–±—É—Ç—ã name –∏ age
        self.name = name
        self.age = age

    # –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –ø–æ—Ç–æ–º–∫–∞—Ö
    def make_sound(self):
        pass

    # –ú–µ—Ç–æ–¥ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏
    def eat(self):
        logging.info(f"{self.name} is eating.")
        print(f"{self.name} is eating.")

# üìå –ü–æ–¥–∫–ª–∞—Å—Å Bird (–ü—Ç–∏—Ü–∞)
class Bird(Animal):
    def make_sound(self):
        logging.info(f"{self.name} chirps.")
        print(f"{self.name} chirps.")

# üìå –ü–æ–¥–∫–ª–∞—Å—Å Mammal (–ú–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ)
class Mammal(Animal):
    def make_sound(self):
        logging.info(f"{self.name} growls.")
        print(f"{self.name} growls.")

# üìå –ü–æ–¥–∫–ª–∞—Å—Å Reptile (–†–µ–ø—Ç–∏–ª–∏—è)
class Reptile(Animal):
    def make_sound(self):
        logging.info(f"{self.name} hisses.")
        print(f"{self.name} hisses.")

# üìå –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞: –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–¥–∞—é—Ç –∑–≤—É–∫
def animal_sound(animals):
    for animal in animals:
        animal.make_sound()

# üìå –ö–ª–∞—Å—Å Zoo (–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
class Zoo:
    def __init__(self, name):
        self.name = name
        self.animals = []  # –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        self.staff = []  # –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    def add_animal(self, animal):
        self.animals.append(animal)
        logging.info(f"Animal {animal.name} added to the zoo.")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    def add_staff(self, staff_member):
        self.staff.append(staff_member)
        logging.info(f"Staff {staff_member.name} hired.")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–æ–æ–ø–∞—Ä–∫–∞ –≤ —Ñ–∞–π–ª
    def save_zoo(self, filename="zoo_data.pkl"):
        with open(filename, 'wb') as f:
            pickle.dump(self, f)
        logging.info("Zoo state saved to file.")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–æ–æ–ø–∞—Ä–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
    @staticmethod
    def load_zoo(filename="zoo_data.pkl"):
        with open(filename, 'rb') as f:
            zoo = pickle.load(f)
        logging.info("Zoo state loaded from file.")
        return zoo

# üìå –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
class Staff:
    def __init__(self, name):
        self.name = name

# üìå –ö–ª–∞—Å—Å —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—è –∑–æ–æ–ø–∞—Ä–∫–∞
class ZooKeeper(Staff):
    def feed_animal(self, animal):
        logging.info(f"{self.name} feeds {animal.name}.")
        print(f"{self.name} feeds {animal.name}.")

# üìå –ö–ª–∞—Å—Å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞
class Veterinarian(Staff):
    def heal_animal(self, animal):
        logging.info(f"{self.name} heals {animal.name}.")
        print(f"{self.name} heals {animal.name}.")

# üìå GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ Tkinter
def run_gui(zoo):
    root_window = tk.Tk()
    root_window.title(f"{zoo.name} Management")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —á–µ—Ä–µ–∑ GUI
    def add_animal_gui():
        name = name_entry.get()
        age = int(age_entry.get())
        animal_type = animal_type_var.get()

        if animal_type == "Bird":
            animal = Bird(name, age)
        elif animal_type == "Mammal":
            animal = Mammal(name, age)
        elif animal_type == "Reptile":
            animal = Reptile(name, age)
        else:
            messagebox.showerror("Error", "Select animal type!")
            return

        zoo.add_animal(animal)
        messagebox.showinfo("Success", f"{animal_type} {name} added to zoo.")

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–∫–Ω–∞
    tk.Label(root_window, text="Name:").pack()
    name_entry = tk.Entry(root_window)
    name_entry.pack()

    tk.Label(root_window, text="Age:").pack()
    age_entry = tk.Entry(root_window)
    age_entry.pack()

    animal_type_var = tk.StringVar(value="Bird")
    tk.Label(root_window, text="Type:").pack()

    # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    tk.Radiobutton(root_window, text="Bird", variable=animal_type_var, value="Bird").pack()
    tk.Radiobutton(root_window, text="Mammal", variable=animal_type_var, value="Mammal").pack()
    tk.Radiobutton(root_window, text="Reptile", variable=animal_type_var, value="Reptile").pack()

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
    tk.Button(root_window, text="Add Animal", command=add_animal_gui).pack()

    root_window.mainloop()

# üìå –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def menu(zoo):
    while True:
        print("\nZoo Management System")
        print("1. Add Animal")
        print("2. Add ZooKeeper")
        print("3. Add Veterinarian")
        print("4. Show Animal Sounds")
        print("5. Save Zoo")
        print("6. Load Zoo")
        print("7. Open GUI")
        print("0. Exit")

        choice = input("Choose an option: ")

        if choice == "1":
            name = input("Animal Name: ")
            age = int(input("Animal Age: "))
            type_choice = input("Type (Bird/Mammal/Reptile): ")
            if type_choice == "Bird":
                zoo.add_animal(Bird(name, age))
            elif type_choice == "Mammal":
                zoo.add_animal(Mammal(name, age))
            elif type_choice == "Reptile":
                zoo.add_animal(Reptile(name, age))
            else:
                print("Invalid animal type!")

        elif choice == "2":
            name = input("ZooKeeper Name: ")
            zoo.add_staff(ZooKeeper(name))

        elif choice == "3":
            name = input("Veterinarian Name: ")
            zoo.add_staff(Veterinarian(name))

        elif choice == "4":
            animal_sound(zoo.animals)

        elif choice == "5":
            zoo.save_zoo()

        elif choice == "6":
            zoo = Zoo.load_zoo()

        elif choice == "7":
            run_gui(zoo)

        elif choice == "0":
            break

        else:
            print("Invalid choice!")

# üìå –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    zoo = Zoo("City Zoo")
    menu(zoo)
